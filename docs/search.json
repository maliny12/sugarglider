[{"path":"https://maliny12.github.io/sugarglider/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 sugarglider authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://maliny12.github.io/sugarglider/articles/Examples.html","id":"monthly-temperature-across-australia","dir":"Articles","previous_headings":"Examples","what":"Monthly temperature across Australia","title":"Examples","text":"National Oceanic Atmospheric Administration (NOAA) provides comprehensive weather data numerous stations across Australia. aus_temp dataset includes key climate variables, precipitation temperature, recorded 29 different weather stations throughout 2020. Using default rescaling parameters, can visualize temperature data geom_glyph_segment(), alongside geom_point() elements mark location weather station. segment glyph represents local climate data, offering intuitive way explore temperature variations across Australia. default identity scaling function applied set minor values within grid cell. method centers glyphs vertically horizontally based station’s coordinates adjusts minor axes fit within interval [-1, 1]. ensures glyphs appropriately sized fit desired dimensions. example, also specifying size glyph specifying size width height glyph.  far, visualizations used global rescaling (enabled default), meaning glyphs sized relative one another based data values. disabling global rescaling, can see effects local rescaling, glyph resized based individual values. Local Rescale (global_rescale = FALSE): line segment’s length determined local temperature range within region, emphasizing regional differences temperature patterns. Global Rescale (global_rescale = TRUE): Global temperature range determined length line segment, ensuring data range remain consistent across region easy comparison. comparison two rescaling approaches. example, also specify size glyphs setting width = 3 height = 2.","code":"head(aus_temp) |>   kable() |> kable_styling() aus_temp |>   ggplot(aes(     x_major = long,      y_major = lat,      x_minor = month,      y_minor = tmin,      yend_minor = tmax)) +   geom_sf(data = abs_ste, fill = \"antiquewhite\",           inherit.aes = FALSE, color = \"white\") +   coord_sf(xlim = c(110,155)) +   # Add glyph box to each glyph   add_glyph_boxes( width = 3, height = 2) +   # Add points for weather station    geom_point(aes(x = long, y = lat,                  color = \"Weather Station\")) +   # Customize the size of each glyph box using the width and height parameters.   geom_glyph_segment(     width = 3, height = 2,     aes(color = \"Temperature\")) +   # Theme and aesthetic    scale_color_manual(     values = c(\"Weather Station\" = \"firebrick\",                \"Temperature\" = \"black\")) +   labs(color = \"Data\",        title = \"Daily Temperature Variations Across Australian Weather Stations\")  +   theme_glyph() # Global rescale p1 <- aus_temp |>   ggplot(aes(     x_major = long,      y_major = lat,      x_minor = month,      y_minor = tmin,      yend_minor = tmax)) +   geom_sf(data = abs_ste, fill = \"antiquewhite\",           inherit.aes = FALSE, color = \"white\") +   coord_sf(xlim = c(110,155)) +   # Add glyph box to each glyph   add_glyph_boxes(width = 3, height = 2) +   # Add reference lines to each glyph   add_ref_lines(width = 3, height = 2) +   # Glyph segment plot with global rescale   geom_glyph_segment(global_rescale = TRUE,                      width = 3, height = 2) +   labs(title = \"Global Rescale\") +   theme_glyph()    # Local Rescale p2 <- aus_temp |>   ggplot(aes(     x_major = long,      y_major = lat,      x_minor = month,      y_minor = tmin,      yend_minor = tmax)) +   geom_sf(data = abs_ste, fill = \"antiquewhite\",           inherit.aes = FALSE, color = \"white\") +   coord_sf(xlim = c(110,155)) +   # Add glyph box to each glyph   add_glyph_boxes(width = 3, height = 2) +   # Add reference lines to each glyph   add_ref_lines(width = 3, height = 2) +   # Glyph segment plot with local rescale   geom_glyph_segment(global_rescale = FALSE,                      width = 3, height = 2) +   labs(title = \"Local Rescale\") +   theme_glyph()  grid.arrange(p1, p2, ncol = 2)"},{"path":"https://maliny12.github.io/sugarglider/articles/Examples.html","id":"highlighting-temperature-changes-with-color-coded-glyph","dir":"Articles","previous_headings":"Examples > Monthly temperature across Australia","what":"Highlighting Temperature Changes with Color-Coded Glyph","title":"Examples","text":"Expanding temperature analysis, now incorporate precipitation data across Australia using geom_glyph_ribbon(). glyphs color-coded represent varying levels rainfall, reference lines glyph boxes enhancing clarity allow easy comparison precipitation level across country.  ’re interested comparing temperature trends across different years specific regions Victoria, geom_glyph_ribbon() provides way visualize temperatures evolved time, year distinguished different color clarity.","code":"prcp <- aus_temp |>    group_by(id) |>    mutate(prcp = mean(prcp, na.rm = TRUE)) |>    ggplot(aes(x_major = long, y_major = lat,               x_minor = month, ymin_minor = tmin,               ymax_minor = tmax,                fill = prcp, color = prcp)) +   geom_sf(data = abs_ste, fill = \"antiquewhite\",           inherit.aes = FALSE, color = \"white\") +   # Add glyph box to each glyph    add_glyph_boxes() +   # Add ref line to each glyph    add_ref_lines() +   # Add glyph ribbon plots    geom_glyph_ribbon() +    coord_sf(xlim = c(112,155)) +   # Theme and aesthetic    theme_glyph() +   scale_fill_gradientn(colors = c(\"#ADD8E6\", \"#2b5e82\", \"dodgerblue4\")) +   scale_color_gradientn(colors = c( \"#ADD8E6\", \"#2b5e82\", \"dodgerblue4\")) +   labs(fill = \"Percepitation\", color = \"Percepitation\",        title = \"Precipitation and Temperature Ranges Across Australia\")   prcp fact <- historical_temp |>    filter(id %in% c(\"ASN00026021\", \"ASN00085291\", \"ASN00084143\")) |>    ggplot(aes(color = factor(year), fill = factor(year),               group = interaction(year,id),               x_major = long, y_major = lat,               x_minor = month, ymin_minor = tmin,                ymax_minor = tmax)) +   geom_sf(data = abs_ste |> filter(NAME == \"Victoria\"),            fill = \"antiquewhite\", color = \"white\",           inherit.aes = FALSE)  +   # Customized the dimension of each glyph with `width` and `height` parameters    add_glyph_boxes(width = rel(2),                    height = rel(1.5)) +    add_ref_lines(width = rel(2),                  height = rel(1.5)) +    geom_glyph_ribbon(alpha = 0.5,                      width = rel(2),                      height = rel(1.5)) +   labs(x = \"Longitude\", y = \"Latitude\",        color = \"year\", fill = \"year\",        title = \"Temperature Trends in Selected Victorian Weather Stations\") +   # Theme and aesthetic   theme_glyph() +   theme(legend.position.inside = c(.4,0)) +   scale_colour_wsj(\"colors6\") +   scale_fill_wsj(\"colors6\")   fact"},{"path":"https://maliny12.github.io/sugarglider/articles/Examples.html","id":"integrating-glyph-legends","dir":"Articles","previous_headings":"Examples > Monthly temperature across Australia","what":"Integrating Glyph Legends","title":"Examples","text":"enhance map readability, add_geom_legend() function integrates larger version one glyphs bottom left corner plot. legend helps users interpret scale data. example , series glyph created using geom_glyph_ribbon() overlaid base map depict daily temperature variations across Australian weather stations. legend added add_glyph_legend(), allowing users easily interpret range daily temperature value based randomly selected weather station. Since legend data drawn single, randomly chosen station, ’s important users set seed reproducibility ensure consistent results.","code":"set.seed(28493) legend <- aus_temp |>    ggplot(aes(x_major = long, y_major = lat,               x_minor = month, ymin_minor = tmin,               ymax_minor = tmax)) +   geom_sf(data = abs_ste, fill = \"antiquewhite\",           inherit.aes = FALSE, color = \"white\") +   add_glyph_boxes(color = \"#227B94\") +   add_ref_lines(color = \"#227B94\") +   add_glyph_legend(color = \"#227B94\", fill = \"#227B94\") +   # Add a ribbon legend   geom_glyph_ribbon(color = \"#227B94\", fill = \"#227B94\") +   theme_glyph()  +    labs(title = \"Temperature Ranges Across Australia with Glyph Legend\")   legend"},{"path":"https://maliny12.github.io/sugarglider/articles/Examples.html","id":"observations-and-insights","dir":"Articles","previous_headings":"Examples > Monthly temperature across Australia","what":"Observations and Insights","title":"Examples","text":"Geom Glyph Segment Geom Glyph Ribbon provide valuable insights seasonal temperature trends across Australia. Disabling global rescaling reveals weather stations follow similar curvature trends relative neighboring stations. However, global rescaling enabled, becomes apparent coastal regions exhibit far less temperature variation overall.","code":""},{"path":"https://maliny12.github.io/sugarglider/articles/geom_segment_glyph.html","id":"geomsegmentglyph","dir":"Articles","previous_headings":"","what":"GeomSegmentGlyph","title":"geom_glyph_segment","text":"Glyph Maps allow data visualized across geographic regions different periods time (see cubble information). Line Segment Glyphs extend adding options visualize multivariate spatio-temporal data. aesthetics similar geom_segment x y major variables order designate glyph placement.","code":""},{"path":"https://maliny12.github.io/sugarglider/articles/geom_segment_glyph.html","id":"monthly-temperatures-across-the-us","dir":"Articles","previous_headings":"","what":"Monthly Temperatures Across the US","title":"geom_glyph_segment","text":"National Oceanica Atmosphere Administration (NOAA) provides weather data stations US. stations dataset contains climate variables prerciptation, temperature, elevation 10 different weather stations every day 2020 2023. example, interesting finding average minimum maximum temperature per month across days years per station. using dplyr functions group_by summarise default rescaling parameters, resulting geom segment glyph along geom_point help illustrate station location segment glyph corresponds . GeomSegmentGlyph additionally offers ways rescale glyphs. , can specify rescale11x preferred rescaling x center glyph station. Furthermore, options y-scaling include centering glyph vertically station location. rescaling past examples made global rescaling enabled (default) results glyphs differently sized according values relative . Turning global rescaling allows glpyhs rescale within individual values produce glyphs sized evenly.","code":"stations grouped <- stations |>   group_by(month, name, long, lat) |>   summarise(     avgmin = mean(tmin, na.rm = TRUE),     avgmax = mean(tmax, na.rm = TRUE) ) ggplot(data = grouped) +   geom_sf(data = mainland_us, color = \"white\") +   ggthemes::theme_map() +   geom_point(aes(x = long, y = lat)) +   geom_glyph_segment(     width = 0.4,     height = 0.1,     aes(     x_major = long,      y_major = lat,      x_minor = month,      y_minor = avgmin,      yend_minor = avgmax)     ) ggplot(data = grouped) +   geom_sf(data = mainland_us, color = \"white\") +   ggthemes::theme_map() +   geom_point(aes(x = long, y = lat)) +   geom_glyph_segment(     x_scale = rescale11x,     width = 2,     height = 0.1,     aes(     x_major = long,      y_major = lat,      x_minor = month,      y_minor = avgmin,      yend_minor = avgmax)     ) ggplot(data = grouped) +   geom_sf(data = mainland_us, color = \"white\") +   ggthemes::theme_map() +   geom_point(aes(x = long, y = lat)) +   geom_glyph_segment(     x_scale = rescale11x,     y_scale = rescale01y,     width = 2,     height = 3,     aes(     x_major = long,      y_major = lat,      x_minor = month,      y_minor = avgmin,      yend_minor = avgmax)     ) ggplot(data = grouped) +   geom_sf(data = mainland_us, color = \"white\") +   ggthemes::theme_map() +   geom_point(aes(x = long, y = lat)) +   geom_glyph_segment(     x_scale = rescale11x,     y_scale = rescale01y,     global_rescale = FALSE,     width = 2,     height = 3,     aes(     x_major = long,      y_major = lat,      x_minor = month,      y_minor = avgmin,      yend_minor = avgmax)     )"},{"path":"https://maliny12.github.io/sugarglider/articles/geom_segment_glyph.html","id":"observations-and-insights","dir":"Articles","previous_headings":"","what":"Observations and Insights","title":"geom_glyph_segment","text":"Line Segment Glyphs offer unique insights seasonal temperature trends across US. Turning global rescaling shows stations generally followed curvature trends relative lowest temperatures. However factoring global rescaling, certain locations show much less total variation temperature California Florida.","code":""},{"path":"https://maliny12.github.io/sugarglider/articles/sugarglider.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"sugarglider","text":"sugarglider package extends capabilities ggplot2 introducing functions specifically designed visualizing seasonal patterns spatio-temporal data. includes geom_glyph_ribbon() geom_glyph_segment() , represent measurements recorded time specific locations use glyph maps. functions enable clear depictions seasonal trends leveraging combination x_major y_major coordinates. structure glyph maps sugarglider consists four main layers: base map, glyph boxes, reference lines, ribbon segment glyphs. Additionally, users can create legend, adding extra layer glyph maps. Apart base map, sugarglider offers functionalities generate elements comprehensive glyph map, illustrated figure . layer can plotted independently, package supports creation glyph plots using either ribbon segment geometries. core functionality includes: geom_glyph_ribbon(): Displays interval y-axis x_minor value, bounds defined ymin_minor ymax_minor. function draws ribbon geometry using geom_ribbon() ggplot2 draw ribbon geometry, resulting ribbon glyphs. glyph plotted based combination x_major y_major coordinates. functionality particularly useful visualizing ranges uncertainties data. geom_glyph_segment(): Connects y_minor yend_minor straight line using geom_segment() ggplot2, resulting segment glyphs. glyph plotted based combination x_major y_major coordinates.  addition two functions, sugarglider offers several features enhance customization glyph maps. add_ref_box() function introduces reference boxes visually frame individual glyphs, helping define boundaries distinguish glyphs . add_ref_line() function draws horizontal midpoint glyph, facilitating comparisons across data points. add_glyph_legend() function allows users display enlarged version randomly chosen glyph bottom-left corner panel, enabling users visualize data range. Lastly, theme_glyph() function provides customized theme glyph maps, built top theme_map() ggthemes. adjusts plot’s appearance, including legend position, text styles, background settings, create clean, visually consistent layout glyph visualizations.","code":"vic_temp <- aus_temp |>   filter(id %in% c(\"ASN00026021\", \"ASN00085291\", \"ASN00084143\"))  # Define a color palette color_palette <- c(\"deepskyblue4\", \"coral3\")  p1 <- vic_temp |>    ggplot(aes(x_major = long,               y_major = lat,               x_minor = month,               ymin_minor = tmin,               ymax_minor = tmax)) +   geom_sf(data = abs_ste |> filter(NAME == \"Victoria\"),           fill = \"antiquewhite\", color = \"white\", inherit.aes = FALSE)  +   # Customize the size of each glyph box using the width and height parameters.   add_glyph_boxes(color = color_palette[1]) +   add_ref_lines(color = color_palette[1]) +   geom_glyph_ribbon(color = color_palette[1], fill = color_palette[1]) +   # Theme and aesthetic   theme_glyph() +   labs(title = \"geom_glyph_ribbon()\") +   theme(plot.title = element_text(hjust = 0.5),         title = element_text(color = color_palette[1],                              family  = \"mono\"))   p2 <- vic_temp |>    ggplot(aes(x_major = long,               y_major = lat,               x_minor = month,               y_minor = tmin,               yend_minor = tmax)) +   geom_sf(data = abs_ste |> filter(NAME == \"Victoria\"),          fill = \"antiquewhite\", color = \"white\", inherit.aes = FALSE)  +   # Customize the size of each glyph box using the width and height parameters.   add_glyph_boxes(color = color_palette[2]) +   add_ref_lines(color = color_palette[2]) +   geom_glyph_segment(color = color_palette[2]) +   # Theme and aesthetic   theme_glyph() +   labs(title = \"geom_glyph_segment()\") +   theme(plot.title = element_text(hjust = 0.5),         title = element_text(color = color_palette[2]))  grid.arrange(p1, p2, ncol = 2)"},{"path":"https://maliny12.github.io/sugarglider/articles/sugarglider.html","id":"aesthetics","dir":"Articles","previous_headings":"","what":"Aesthetics","title":"sugarglider","text":"sugarglider provides aesthetics geom_glyph_ribbon() geom_glyph_segment() available geom_ribbon() geom_segment() ggplot2. include variable glyph plot, must specified aesthetic. functions sugarglider expect spatial coordinates major axis temporal data, along measurements, minor axis. produce glyph-maps, following aesthetics required: functions add_ref_box(), add_ref_line(), add_geom_legend() compatible either ymin_minor, ymax_minor, y_minor, yend_minor. Additionally, sugarglider introduces several customizable options tailor visual aspects:","code":""},{"path":"https://maliny12.github.io/sugarglider/articles/sugarglider.html","id":"options","dir":"Articles","previous_headings":"","what":"Options","title":"sugarglider","text":"Options within sugarglider package allow tailor behavior visualizations meet specific needs analysis. global_rescale argument provides control whether rescaling occur globally across data points handled individually glyph. sugarglider also offers variety customizable features enhance flexibility precision visualizations. example, facilitates scaling minor values within glyph along x y axes. Users can specify rescale function replacing “identity” custom function x_scale y_scale. user wishes modify rescaling function one axis, can replace value corresponding parameter chosen function retain “identity” . package, “identity” rescale minor axes interval [-1,1]. impact rescaling glyphs implications visual interpretation thoroughly discussed upcoming section. Additionally, width height glyphs adjustable, allowing users modify appearance glyph match dimensions scaling data visualized. customization options ensure sugarglider can adapt broad range data types requirements, making versatile tool seasonal spatiotemporal data visualization.","code":""},{"path":"https://maliny12.github.io/sugarglider/articles/sugarglider.html","id":"interactivity","dir":"Articles","previous_headings":"","what":"Interactivity","title":"sugarglider","text":"Interactive graphics particularly useful working spatio-temporal data allow users explore data multiple perspectives. cubble package, exemplifies creating linked interactive plots using crosswalk::bscols(). vignette, demonstrate create interactive glyph maps using Leaflet.","code":""},{"path":"https://maliny12.github.io/sugarglider/articles/sugarglider.html","id":"create-glyph-maps-with-leaflet","dir":"Articles","previous_headings":"","what":"Create glyph maps with leaflet","title":"sugarglider","text":"dataset used example, train, provides comprehensive monthly summary daily patronage train station Victoria fiscal year 2023-2024. create interactive glyph maps Leaflet, first need save glyph PNG add Leaflet basemap icons. process begins creating list unique train stations service metro vline. iterate station generate ribbon glyphs using geom_glyph_ribbon(), add_glyph_boxes() add_ref_lines(). glyph saved PNG format, file paths PNGs stored object next step. create base map Leaflet, use leaflet() function addProviderTiles() CartoDB.Positron provider achieve light, grey map aesthetic. Additionally, scale bar added bottom left corner reference. Next, iterate PNG files convert icons using makeIcon() function. Users can control dimensions icon modifying iconWidth iconHeight arguments. final step add icon Leaflet map using addMarkers(). Within options argument addMarkers, users can fine-tune glyph’s display properties, opacity level. label argument allows users specify information wish display hover-effect, example set display station ID.","code":"# Generate a list of unique train stations df_station <- train$station_name |> unique()  # Generate PNG of all the ribbon glyph purrr::map(1:length(df_station), function(i) {   dt <- train |> filter(station_name == df_station[i])   p <- dt |>   ggplot(aes(x_major = long, y_major = lat,                    x_minor = month_year, ymin_minor = min_monthly,                    ymax_minor = max_monthly)) +     add_glyph_boxes(color = \"#FFAD60\",                      fill = \"#FFEEAD\", alpha = 0.5,                     linewidth = 1, width = 3, height  =2) +     add_ref_lines(color = \"#FFAD60\", alpha = 1,                   linewidth = 1, width = 3, height  =2) +     geom_glyph_ribbon(color = \"#A66E38\", fill = \"#A66E38\",                       width = 3, height  =2) +     theme_void()       file_path <- paste0(\"figures/glyph_\", df_station[i], \".png\")   ggsave(file_path, plot = p, width = 3, height = 2, units = \"in\", dpi = 300,          bg = \"transparent\")   return(file_path)    }) -> train_png # Create a leaflet map  leaflet_map <- leaflet() |>   addProviderTiles(\"CartoDB.Positron\") |>   addScaleBar(position = \"bottomleft\") # Loop through the PNG files and add them to the map for (i in seq_along(train_png)) {   icon <- makeIcon(iconUrl = train_png[i], iconWidth = 100, iconHeight = 60)    dt <- train |> filter(station_name == df_station[i])   leaflet_map <- leaflet_map |>     addMarkers(lng = dt$long[1], lat = dt$lat[1], icon = icon,                label = dt$station_name, options = markerOptions(opacity = 0.1)) }  leaflet_map"},{"path":"https://maliny12.github.io/sugarglider/articles/sugarglider.html","id":"create-interative-glyph-maps-with-ggiraph","dir":"Articles","previous_headings":"","what":"Create interative glyph maps with ggiraph","title":"sugarglider","text":"User can generate interactive glyphs ggiraph::girafe using sugarglider. illustrate, use aus_temp dataset example. First, users need specify tooltips, details displayed hovering glyphs. example, tooltips consist station id, month, minimum maximum temperature across month. Tooltips needs provided asethetic tooltip argument. User can plot desired glyph map save ggplot object. ggplot object converted girafe object using girafe() function.","code":"vic_nsw <- aus_temp |>   filter(id %in% c(\"ASN00026021\", \"ASN00085291\", \"ASN00084143\",                    \"ASN00055325\", \"ASN00049000\")) # Specify tooltip for ggiraph  vic_nsw <- vic_nsw |>   mutate(tooltip = paste(\"Station ID: \", id,                          \"\\nmonth: \", month,                          \"\\nmin-temp: \", round(tmin,2),                          \"\\nmax-temp: \", round(tmax,2))) temp <- vic_nsw |>    ggplot(aes(x_major = long, y_major = lat,              x_minor = month, y_minor = tmin,              yend_minor = tmax,              tooltip = tooltip)) +    geom_sf(data = abs_ste |> filter(NAME %in% c(\"New South Wales\", \"Victoria\")),           color = \"white\",           fill = \"antiquewhite\", inherit.aes = FALSE) +   add_glyph_boxes(color = \"#CD5C08\") +   add_ref_lines(color = \"#CD5C08\") +   geom_glyph_segment(color = \"#CD5C08\") +   coord_sf(xlim = c(140,153)) +   theme_glyph()  # Interactive plot using ggiraph girafe(ggobj = temp)"},{"path":"https://maliny12.github.io/sugarglider/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maliny Po. Author, maintainer, copyright holder. S. Nathan Yang. Author. H. Sherry Zhang. Contributor. Dianne Cook. Contributor.","code":""},{"path":"https://maliny12.github.io/sugarglider/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Po M, Yang S (2024). sugarglider: Create Glyph-Maps Spatiotemporal Data. https://maliny12.github.io/sugarglider/, https://github.com/maliny12/sugarglider.","code":"@Manual{,   title = {sugarglider: Create Glyph-Maps of Spatiotemporal Data},   author = {Maliny Po and S. Nathan Yang},   year = {2024},   note = {https://maliny12.github.io/sugarglider/, https://github.com/maliny12/sugarglider}, }"},{"path":[]},{"path":"https://maliny12.github.io/sugarglider/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create Glyph-Maps of Spatiotemporal Data","text":"sugarglider provides ggplot2 extensions create glyph maps visualize seasonal aspects spatio-temporal data geom_glyph_ribbon() geom_glyph_segment(). functions create ribbon segment geometry designed display glyphs based combination x_major y_major. x_minor value, geom_glyph_ribbon() displays y interval defined ymin_minor ymax_minor. Meanwhile, geom_glyph_segment() draws straight line y_minor yend_minor respect x_minor.","code":""},{"path":"https://maliny12.github.io/sugarglider/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Glyph-Maps of Spatiotemporal Data","text":"","code":"# Download the development version from GitHub: devtools::install_github(\"maliny12/sugarglider\")"},{"path":"https://maliny12.github.io/sugarglider/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create Glyph-Maps of Spatiotemporal Data","text":"See examples page learn use sugarglider project.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/GeomGlyphRibbon.html","id":null,"dir":"Reference","previous_headings":"","what":"GeomGlyphRibbon — GeomGlyphRibbon","title":"GeomGlyphRibbon — GeomGlyphRibbon","text":"GeomGlyphRibbon","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/GeomGlyphSegment.html","id":null,"dir":"Reference","previous_headings":"","what":"GeomSegmentGlyph- — GeomGlyphSegment","title":"GeomSegmentGlyph- — GeomGlyphSegment","text":"GeomSegmentGlyph-","code":""},{"path":[]},{"path":"https://maliny12.github.io/sugarglider/reference/GeomSegmentGlyph.html","id":null,"dir":"Reference","previous_headings":"","what":"GeomSegmentGlyph — GeomSegmentGlyph","title":"GeomSegmentGlyph — GeomSegmentGlyph","text":"GeomSegmentGlyph","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_glyph_boxes.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Glyph Boxes layer to glyph plot — add_glyph_boxes","title":"Add Glyph Boxes layer to glyph plot — add_glyph_boxes","text":"function introduces custom layer ggplot, employing 'glyph boxes' visually represent individual glyph. Users can specify various aesthetics including alpha, height, width, color, line type, fill customize appearance.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_glyph_boxes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Glyph Boxes layer to glyph plot — add_glyph_boxes","text":"","code":"add_glyph_boxes(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   x_major = NULL,   y_major = NULL,   height = \"default\",   width = \"default\",   fill = \"white\",   linewidth = 0.1,   inherit.aes = TRUE,   show.legend = NA,   ... )"},{"path":"https://maliny12.github.io/sugarglider/reference/add_glyph_boxes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Glyph Boxes layer to glyph plot — add_glyph_boxes","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. NULL, default, data inherited plot data specified call ggplot(). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. x_major, y_major Aesthetics map plot coordinates major minor glyph components. height height glyph. `default` calculated using ratio (1:1.618) relative `width`, maintain consistent aspect ratio. width width glyph. `default` set smallest distance two consecutive coordinates, converted meters degrees latitude using Haversine method. fill color used fill glyph box. linewidth thickness glyph box. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. ... Additional arguments passed function.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_glyph_boxes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Glyph Boxes layer to glyph plot — add_glyph_boxes","text":"layer object can added ggplot.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_glyph_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Legend Layer to a ggplot — add_glyph_legend","title":"Add Legend Layer to a ggplot — add_glyph_legend","text":"function adds custom legend layer ggplot object using specified aesthetics parameters.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_glyph_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Legend Layer to a ggplot — add_glyph_legend","text":"","code":"add_glyph_legend(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   show.legend = NA,   x_minor = NULL,   x_scale = identity,   y_scale = identity,   fill = \"black\",   color = \"black\",   linewidth = 0.5,   alpha = 0.8,   global_rescale = TRUE,   inherit.aes = TRUE,   ... )"},{"path":"https://maliny12.github.io/sugarglider/reference/add_glyph_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Legend Layer to a ggplot — add_glyph_legend","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. x_minor Aesthetics map plot coordinates major minor glyph components. x_scale, y_scale scaling function applied set minor values within grid cell. Defaults `identity`. fill fill color geometric object. color color geometric object's border line. linewidth width geometric object's line. alpha transparency level geometric object, ranging 0 (fully transparent) 1 (fully opaque). global_rescale setting determines whether perform rescaling globally individual glyphs. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed function.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_glyph_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Legend Layer to a ggplot — add_glyph_legend","text":"ggplot2 layer.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_ref_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Add reference lines to glyph plot — add_ref_lines","title":"Add reference lines to glyph plot — add_ref_lines","text":"function draw reference lines include major minor division markers.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_ref_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add reference lines to glyph plot — add_ref_lines","text":"","code":"add_ref_lines(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   show.legend = NA,   x_major = NULL,   y_major = NULL,   height = \"default\",   width = \"default\",   inherit.aes = TRUE,   linewidth = 0.1,   ... )"},{"path":"https://maliny12.github.io/sugarglider/reference/add_ref_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add reference lines to glyph plot — add_ref_lines","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. NULL, default, data inherited plot data specified call ggplot(). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. x_major, y_major Aesthetics map plot coordinates major minor glyph components. height height glyph. `default` calculated using ratio (1:1.618) relative `width`, maintain consistent aspect ratio. width width glyph. `default` set smallest distance two consecutive coordinates, converted meters degrees latitude using Haversine method. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). linewidth thickness reference line. ... Additional arguments passed function.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_ref_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add reference lines to glyph plot — add_ref_lines","text":"ggplot2 layer.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_ribbon_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Ribbon Legend Layer to a ggplot — add_ribbon_legend","title":"Add Ribbon Legend Layer to a ggplot — add_ribbon_legend","text":"function adds custom ribbon legend layer ggplot object using specified aesthetics parameters.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_ribbon_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Ribbon Legend Layer to a ggplot — add_ribbon_legend","text":"","code":"add_ribbon_legend(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   show.legend = NA,   x_minor = NULL,   ymin_minor = NULL,   ymax_minor = NULL,   x_scale = identity,   y_scale = identity,   global_rescale = TRUE,   inherit.aes = TRUE,   ... )"},{"path":"https://maliny12.github.io/sugarglider/reference/add_ribbon_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Ribbon Legend Layer to a ggplot — add_ribbon_legend","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. x_minor, ymin_minor, ymax_minor Aesthetics map plot coordinates major minor glyph components. x_scale, y_scale scaling function applied set minor values within grid cell. Defaults `identity`. global_rescale setting determines whether perform rescaling globally individual glyphs. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed function.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/add_ribbon_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Ribbon Legend Layer to a ggplot — add_ribbon_legend","text":"ggplot2 layer.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/aus_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Australian Weather Data for 2022 — aus_temp","title":"Australian Weather Data for 2022 — aus_temp","text":"dataset contains aggregated monthly average temperatures (minimum maximum) precipitation selected Australian weather stations year 2022. Stations selected based specific criteria operational status completeness data year.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/aus_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Australian Weather Data for 2022 — aus_temp","text":"","code":"aus_temp"},{"path":"https://maliny12.github.io/sugarglider/reference/aus_temp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Australian Weather Data for 2022 — aus_temp","text":"data frame following columns: id Station ID. long Longitude station. lat Latitude station. month Month aggregated data. tmin Monthly average minimum temperature (degrees Celsius). tmax Monthly average maximum temperature (degrees Celsius). prcp Monthly average precipitation (mm).","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/aus_temp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Australian Weather Data for 2022 — aus_temp","text":"GHCN Daily data via `meteo_pull_monitors` `rnoaa` package.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/calculate_min_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Smallest Distance Across Unique Combinations of Major Axes — calculate_min_dist","title":"Calculate the Smallest Distance Across Unique Combinations of Major Axes — calculate_min_dist","text":"function calculates smallest distance unique coordinate combinations major axes using Haversine formula, measures distances surface sphere (.e., Earth). function returns minimum distance degrees latitude corresponding height maintains glyph ratio 1:1.618 (golden ratio).","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/calculate_min_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Smallest Distance Across Unique Combinations of Major Axes — calculate_min_dist","text":"","code":"calculate_min_dist(data)"},{"path":"https://maliny12.github.io/sugarglider/reference/calculate_min_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Smallest Distance Across Unique Combinations of Major Axes — calculate_min_dist","text":"data data frame containing columns `x_major` `y_major`, represent coordinates (longitude latitude) point.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/calculate_min_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Smallest Distance Across Unique Combinations of Major Axes — calculate_min_dist","text":"list containing: width smallest distance two unique points, converted meters degrees latitude. height height corresponding width, calculated using golden ratio (1:1.618).","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/configure_glyph_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Glyph Data Based on Geometric Plot Type — configure_glyph_data","title":"Setup Glyph Data Based on Geometric Plot Type — configure_glyph_data","text":"Setup Glyph Data Based Geometric Plot Type","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/configure_glyph_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Glyph Data Based on Geometric Plot Type — configure_glyph_data","text":"","code":"configure_glyph_data(data, params, ...)"},{"path":"https://maliny12.github.io/sugarglider/reference/custom_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve scaling function — custom_scale","title":"Retrieve scaling function — custom_scale","text":"Retrieve scaling function","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/custom_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve scaling function — custom_scale","text":"","code":"custom_scale(dx)"},{"path":"https://maliny12.github.io/sugarglider/reference/flights.html","id":null,"dir":"Reference","previous_headings":"","what":"Flight Summary from Airports with the Most Cancellations — flights","title":"Flight Summary from Airports with the Most Cancellations — flights","text":"dataset contains information minimum maximum number flights originated top 10 U.S. airports highest number flight cancellations. airports included Denver (DEN), Orlando (MCO), Seattle (SEA), Atlanta (ATL), Dallas/Fort Worth (DFW), Chicago O'Hare (ORD), Las Vegas (LAS), Los Angeles (LAX), Phoenix (PHX).","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/flights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flight Summary from Airports with the Most Cancellations — flights","text":"","code":"flights"},{"path":"https://maliny12.github.io/sugarglider/reference/flights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Flight Summary from Airports with the Most Cancellations — flights","text":"`flights` data frame 120 rows 6 columns: origin origin airport flight month month flight long Longitude airport lat Latitude airport min_flights minimum number flights originated airport max_flights maximum number flights originated airport","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_ribbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Glyph Ribbon plot using ggplot2 — geom_glyph_ribbon","title":"Create a Glyph Ribbon plot using ggplot2 — geom_glyph_ribbon","text":"function creates ribbon geometry designed display glyphs based combination `x_major` `y_major`. `x_minor` value, `geom_glyph_ribbon()` displays y interval defined `ymin_minor` `ymax_minor`.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_ribbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Glyph Ribbon plot using ggplot2 — geom_glyph_ribbon","text":"","code":"geom_glyph_ribbon(   mapping = NULL,   data = NULL,   show.legend = NA,   stat = \"identity\",   position = \"identity\",   x_major = NULL,   y_major = NULL,   x_minor = NULL,   ymin_minor = NULL,   ymax_minor = NULL,   height = \"default\",   width = \"default\",   x_scale = identity,   y_scale = identity,   global_rescale = TRUE,   inherit.aes = TRUE,   ... )"},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_ribbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Glyph Ribbon plot using ggplot2 — geom_glyph_ribbon","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. x_major, y_major, x_minor, ymin_minor, ymax_minor combination `x_major` `y_major` forms unique grid cell. `ymin_minor` `ymax_minor` define lower upper bounds geom_ribbon. height height glyph. `default` calculated using ratio (1:1.618) relative `width`, maintain consistent aspect ratio. width width glyph. `default` set smallest distance two consecutive coordinates, converted meters degrees latitude using Haversine method. x_scale, y_scale scaling function applied set minor values within grid cell. Defaults `identity`. global_rescale setting determines whether perform rescaling globally individual glyphs. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... Additional arguments passed function.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_ribbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Glyph Ribbon plot using ggplot2 — geom_glyph_ribbon","text":"ggplot object.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_ribbon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Glyph Ribbon plot using ggplot2 — geom_glyph_ribbon","text":"","code":"library(ggplot2) #> Warning: package ‘ggplot2’ was built under R version 4.2.3  # Basic glyph map with base map and custom theme aus_temp |>   ggplot(aes(x_major = long, y_major = lat,          x_minor = month, ymin_minor = tmin, ymax_minor = tmax)) +   geom_sf(data = ozmaps::abs_ste, fill = \"grey95\",           color = \"white\",inherit.aes = FALSE) +   geom_glyph_ribbon() +   ggthemes::theme_map()    # Adjust width and height of the glyph aus_temp |>   ggplot(aes(x_major = long, y_major = lat,          x_minor = month, ymin_minor = tmin, ymax_minor = tmax)) +   geom_sf(data = ozmaps::abs_ste, fill = \"grey95\",           color = \"white\",inherit.aes = FALSE) +   geom_glyph_ribbon(width = rel(4.5), height = rel(3)) +  ggthemes::theme_map()   # Extend glyph map with reference box and line aus_temp |>  ggplot(aes(x_major = long, y_major = lat,          x_minor = month, ymin_minor = tmin, ymax_minor = tmax)) +   geom_sf(data = ozmaps::abs_ste, fill = \"grey95\",           color = \"white\",inherit.aes = FALSE) +   add_glyph_boxes() +   add_ref_lines() +   geom_glyph_ribbon() +   ggthemes::theme_map()"},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Glyph Segment plot using ggplot2 — geom_glyph_segment","title":"Create a Glyph Segment plot using ggplot2 — geom_glyph_segment","text":"function enables creation segment glyphs defining major coordinates (longitude latitude) minor segment structures within grid cell. glyph's appearance can customized specifying height, width, scaling, allowing flexible data representation visual context.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Glyph Segment plot using ggplot2 — geom_glyph_segment","text":"","code":"geom_glyph_segment(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   x_major = NULL,   x_minor = NULL,   y_major = NULL,   y_minor = NULL,   yend_minor = NULL,   width = \"default\",   x_scale = identity,   y_scale = identity,   height = \"default\",   global_rescale = TRUE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Glyph Segment plot using ggplot2 — geom_glyph_segment","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. x_major, x_minor, y_major, y_minor, yend_minor name variable (string) major minor x y axes. x_major y_major specify longitude latitude map x_minor, y_minor, yend_minor provide structure glyph. width width glyph. `default` set smallest distance two consecutive coordinates, converted meters degrees latitude using Haversine method. y_scale, x_scale scaling function applied set minor values within grid cell. default identity produces result without scaling. height height glyph. `default` calculated using ratio (1:1.618) relative `width`, maintain consistent aspect ratio. global_rescale Determines whether rescaling performed globally separately individual glyph. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Glyph Segment plot using ggplot2 — geom_glyph_segment","text":"ggplot object","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_glyph_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Glyph Segment plot using ggplot2 — geom_glyph_segment","text":"","code":"library(ggplot2)  # Basic glyph map with base map and custom theme aus_temp |>   ggplot(aes(x_major = long, y_major = lat,          x_minor = month, y_minor = tmin, yend_minor = tmax)) +   geom_sf(data = ozmaps::abs_ste, fill = \"grey95\",           color = \"white\",inherit.aes = FALSE) +   geom_glyph_segment() +   ggthemes::theme_map()    # Adjust width and height of the glyph aus_temp |>   ggplot(aes(x_major = long, y_major = lat,          x_minor = month, y_minor = tmin, yend_minor = tmax)) +   geom_sf(data = ozmaps::abs_ste, fill = \"grey95\",           color = \"white\",inherit.aes = FALSE) +   geom_glyph_segment(width = rel(4.5), height = rel(3)) +  ggthemes::theme_map()   # Extend glyph map with reference box and line aus_temp |>  ggplot(aes(x_major = long, y_major = lat,          x_minor = month, y_minor = tmin, yend_minor = tmax)) +   geom_sf(data = ozmaps::abs_ste, fill = \"grey95\",           color = \"white\",inherit.aes = FALSE) +   add_glyph_boxes() +   add_ref_lines() +   geom_glyph_segment() +   ggthemes::theme_map()"},{"path":"https://maliny12.github.io/sugarglider/reference/geom_segment_glyph.html","id":null,"dir":"Reference","previous_headings":"","what":"GeomSegmentGlyph — geom_segment_glyph","title":"GeomSegmentGlyph — geom_segment_glyph","text":"(Need description)","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_segment_glyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeomSegmentGlyph — geom_segment_glyph","text":"","code":"geom_segment_glyph(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   x_major = NULL,   x_minor = NULL,   y_major = NULL,   ymin_minor = NULL,   ymax_minor = NULL,   width = ggplot2::rel(2.3),   x_scale = identity,   y_scale = identity,   height = ggplot2::rel(2),   global_rescale = TRUE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://maliny12.github.io/sugarglider/reference/geom_segment_glyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeomSegmentGlyph — geom_segment_glyph","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. x_major, x_minor, y_major, ymin_minor, ymax_minor name variable (string) major minor x y axes. x_major y_major specify longitude latitude map x_minor, ymin_minor, ymax_minor provide structure glyph. y_scale, x_scale scaling function applied set minor values within grid cell. default identity produces result without scaling. height, width height width glyph. global_rescale Determines whether rescaling performed globally separately individual glyph. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/geom_segment_glyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GeomSegmentGlyph — geom_segment_glyph","text":"ggplot object (Need examples)","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/get_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve function from global environment — get_scale","title":"Retrieve function from global environment — get_scale","text":"Retrieve function global environment","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/get_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve function from global environment — get_scale","text":"","code":"get_scale(x)"},{"path":"https://maliny12.github.io/sugarglider/reference/glyph.html","id":null,"dir":"Reference","previous_headings":"","what":"GeomSegmentGlyph — geom_segment_glyph","title":"GeomSegmentGlyph — geom_segment_glyph","text":"GeomSegmentGlyph","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/glyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeomSegmentGlyph — geom_segment_glyph","text":"","code":"geom_segment_glyph(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   x_major = NULL,   x_minor = NULL,   y_major = NULL,   y_minor = NULL,   yend_minor = NULL,   width = 0.1,   x_scale = identity,   y_scale = identity,   height = 0.1,   global_rescale = TRUE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://maliny12.github.io/sugarglider/reference/glyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeomSegmentGlyph — geom_segment_glyph","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, either ggproto Geom subclass string naming stat stripped stat_ prefix (e.g. \"count\" rather \"stat_count\") position Position adjustment, either string naming adjustment (e.g. \"jitter\" use position_jitter), result call position adjustment function. Use latter need change settings adjustment. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. x_major, x_minor, y_major, y_minor, xend_minor, yend_minor name variable (string) major minor x y axes. x_major y_major specify longitude latitude map x_minor, y_minor, xend_minor, yend_minor provide structure glyph. y_scale, x_scale scaling function applied set minor values within grid cell. default identity produces result without scaling. height, width height width glyph. global_rescale Determines whether rescaling performed globally separately individual glyph. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/glyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GeomSegmentGlyph — geom_segment_glyph","text":"ggplot object","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/glyph_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Create reference boxes for glyph plot — glyph_box","title":"Create reference boxes for glyph plot — glyph_box","text":"Create reference boxes glyph plot","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/glyph_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create reference boxes for glyph plot — glyph_box","text":"","code":"glyph_box(data, params)"},{"path":"https://maliny12.github.io/sugarglider/reference/glyph_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaled positional adjustment — glyph_mapping","title":"Scaled positional adjustment — glyph_mapping","text":"Scaled positional adjustment","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/glyph_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaled positional adjustment — glyph_mapping","text":"","code":"glyph_mapping(spatial, scaled_value, length)"},{"path":"https://maliny12.github.io/sugarglider/reference/glyph_setup_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for geom_glyph_ribbon — glyph_setup_data","title":"Prepare data for geom_glyph_ribbon — glyph_setup_data","text":"Prepare data geom_glyph_ribbon","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/glyph_setup_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for geom_glyph_ribbon — glyph_setup_data","text":"","code":"glyph_setup_data(data, params, ...)"},{"path":"https://maliny12.github.io/sugarglider/reference/glyph_setup_grob.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ggplot2 object into grob — glyph_setup_grob","title":"Convert ggplot2 object into grob — glyph_setup_grob","text":"Convert ggplot2 object grob","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/glyph_setup_grob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ggplot2 object into grob — glyph_setup_grob","text":"","code":"glyph_setup_grob(data, panel_params)"},{"path":"https://maliny12.github.io/sugarglider/reference/historical_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Historical Australian Weather Data from 2021-2022 — historical_temp","title":"Historical Australian Weather Data from 2021-2022 — historical_temp","text":"dataset contains aggregated monthly average temperatures (minimum maximum) precipitation selected Australian weather stations years 2021 2022. provides broader historical perspective compared `aus_temp`. Stations selected based operational status data completeness.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/historical_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Historical Australian Weather Data from 2021-2022 — historical_temp","text":"","code":"historical_temp"},{"path":"https://maliny12.github.io/sugarglider/reference/historical_temp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Historical Australian Weather Data from 2021-2022 — historical_temp","text":"data frame following columns: id Station ID. long Longitude station. lat Latitude station. month Month aggregated data. year Year aggregated data, either 2021 2022. tmin Monthly average minimum temperature (degrees Celsius). tmax Monthly average maximum temperature (degrees Celsius). prcp Monthly average precipitation (mm).","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/historical_temp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Historical Australian Weather Data from 2021-2022 — historical_temp","text":"GHCN Daily data via `meteo_pull_monitors` `rnoaa` package.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/ref_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate reference lines for glyph plot — ref_line","title":"Calculate reference lines for glyph plot — ref_line","text":"Calculate reference lines glyph plot","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/ref_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate reference lines for glyph plot — ref_line","text":"","code":"ref_line(data, params)"},{"path":"https://maliny12.github.io/sugarglider/reference/rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale Functions — rescale","title":"Rescale Functions — rescale","text":"Adjust minor axes fit within interval [-1,1] #' @param x numeric vector","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale Functions — rescale","text":"","code":"rescale(dx)  rescale01y(y, yend, ylim = NULL)  rescale11y(y, yend, xlim = NULL)"},{"path":"https://maliny12.github.io/sugarglider/reference/sugarglider.html","id":null,"dir":"Reference","previous_headings":"","what":"GeomGlyphRibbon — GeomGlyphRibbon","title":"GeomGlyphRibbon — GeomGlyphRibbon","text":"function provides ggplot2 extensions create glyph maps.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/sugarglider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GeomGlyphRibbon — GeomGlyphRibbon","text":"Please see help pages listed : geom_glyph_ribbon geom_glyph_segment Also see vignette usage examples: browseVignettes(\"sugarglider\") Please report issues suggest improvements GitHub: https://maliny12.github.io/sugarglider/","code":""},{"path":[]},{"path":"https://maliny12.github.io/sugarglider/reference/sugarglider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GeomGlyphRibbon — GeomGlyphRibbon","text":"Maintainer: Maliny Po malinypo12@gmail.com (ORCID) [copyright holder] Authors: S. Nathan Yang nathan.s.yang@gmail.com (ORCID) contributors: H. Sherry Zhang huizezhangsh@gmail.com (ORCID) [contributor] Dianne Cook dicook@monash.edu (ORCID) [contributor]","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/theme_glyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Customized Theme for Glyph Plots — theme_glyph","title":"Customized Theme for Glyph Plots — theme_glyph","text":"`theme_glyph()` provides customized theme glyph maps, built top `theme_map()` `ggthemes`. adjusts plot's appearance, including legend position, text styles, background settings, create clean, visually consistent layout glyph visualizations.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/theme_glyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customized Theme for Glyph Plots — theme_glyph","text":"","code":"theme_glyph(   control = list(plot.title = rel(1.5), plot.subtitle = rel(1.3), plot.caption = rel(1),     legend.text = rel(1), legend.title = rel(1)) )"},{"path":"https://maliny12.github.io/sugarglider/reference/theme_glyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customized Theme for Glyph Plots — theme_glyph","text":"control list specifying relative font sizes different plot elements. list can contain following components: plot.title Font size plot title (default: rel(1.5)). plot.subtitle Font size plot subtitle (default: rel(1.3)). plot.caption Font size plot caption (default: rel(1)). legend.text Font size legend text (default: rel(1)). legend.title Font size legend title (default: rel(1)).","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/theme_glyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customized Theme for Glyph Plots — theme_glyph","text":"ggplot2 theme object customized settings glyph plots.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/theme_glyph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Customized Theme for Glyph Plots — theme_glyph","text":"theme includes: Legend positioned inside plot, bottom left corner. Horizontal legend direction `mono` font text. Centered plot titles bold, `mono` font. `mono` fonts subtitles captions. White background panel plot.","code":""},{"path":[]},{"path":"https://maliny12.github.io/sugarglider/reference/theme_glyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customized Theme for Glyph Plots — theme_glyph","text":"","code":"library(ggplot2) library(ozmaps)  aus_temp |>   ggplot(aes(x_major = long, y_major = lat,              x_minor = month, ymin_minor = tmin,              ymax_minor = tmax)) +  geom_sf(data = abs_ste, fill = \"antiquewhite\",          inherit.aes = FALSE, color = \"white\") +  add_glyph_boxes() +  add_ref_lines() +  geom_glyph_ribbon() +  theme_glyph()"},{"path":"https://maliny12.github.io/sugarglider/reference/train.html","id":null,"dir":"Reference","previous_headings":"","what":"Hourly Train Station Patronage 2023-2024 — train","title":"Hourly Train Station Patronage 2023-2024 — train","text":"data set provides comprehensive hourly summary patronage train station Victoria fiscal year 2023-2024. number patronage definded total number boarding alighting station. data set includes detailed breakdowns day types weekdays, weekends, holidays (including school public holidays). Note influence station closures may skew omit data particular days.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hourly Train Station Patronage 2023-2024 — train","text":"","code":"data(train)"},{"path":"https://maliny12.github.io/sugarglider/reference/train.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hourly Train Station Patronage 2023-2024 — train","text":"data frame row representing aggregated monthly data per station, containing: station_name Name train station. hour Operating hour ranging 5AM 12PM. long Longitude train station. lat Latitude train station. services Number unique services passing station. mode Transportation mode, 'Metro', 'VLine', . min_weekday Minimum hourly patronage typical weekday. max_weekday Maximum hourly patronage typical weekday. min_weekend Minimum hourly patronage weekends. max_weekend Maximum hourly patronage weekends. min_holiday Minimum hourly patronage school public holidays. max_holiday Maximum hourly patronage school public holidays.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/train.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hourly Train Station Patronage 2023-2024 — train","text":"https://discover.data.vic.gov.au/dataset/train-service-passenger-counts","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/train.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Hourly Train Station Patronage 2023-2024 — train","text":"Stations incomplete entries due closure included dataset.","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/update_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Defined Glyph dimension — update_params","title":"Defined Glyph dimension — update_params","text":"Defined Glyph dimension","code":""},{"path":"https://maliny12.github.io/sugarglider/reference/update_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defined Glyph dimension — update_params","text":"","code":"update_params(data, params)"},{"path":[]},{"path":"https://maliny12.github.io/sugarglider/news/index.html","id":"sugarglider-101","dir":"Changelog","previous_headings":"","what":"sugarglider 1.0.1","title":"sugarglider 1.0.1","text":"Resized figures reduce tarball size 5 MB. Corrected typo hyperlink README.Rmd","code":""},{"path":"https://maliny12.github.io/sugarglider/news/index.html","id":"sugarglider-100","dir":"Changelog","previous_headings":"","what":"sugarglider 1.0.0","title":"sugarglider 1.0.0","text":"Initial CRAN submission.","code":""}]
